name: Backend CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  backend-integration-ci:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Создать .env с секретами для products
        run: |
          export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
          export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
          export POSTGRES_PORT=5433
          envsubst < backend/products/.env.example > backend/products/.env

      - name: Создать .env с секретами для users
        run: |
          export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
          export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
          export POSTGRES_PORT=5434
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          export ACCESS_TOKEN_EXPIRE_SECONDS="${{ secrets.ACCESS_TOKEN_EXPIRE_SECONDS }}"
          export REFRESH_TOKEN_EXPIRE_SECONDS="${{ secrets.REFRESH_TOKEN_EXPIRE_SECONDS }}"
          envsubst < backend/users/.env.example > backend/users/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start all backend services
        run: |
          docker compose -f backend/products/docker-compose.yml up -d --build
          docker compose -f backend/users/docker-compose.yml up -d --build

      - name: Wait for services to be healthy
        run: sleep 20

      - name: Stop all services
        if: always()
        run: |
          docker compose -f backend/products/docker-compose.yml down -v
          docker compose -f backend/users/docker-compose.yml down -v

  backend-cd:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: backend-integration-ci
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy backend via SSH
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          ACCESS_TOKEN_EXPIRE_SECONDS: ${{ secrets.ACCESS_TOKEN_EXPIRE_SECONDS }}
          REFRESH_TOKEN_EXPIRE_SECONDS: ${{ secrets.REFRESH_TOKEN_EXPIRE_SECONDS }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.SSH_TARGET }}/backend && \
            git pull && \
            export POSTGRES_USER='$POSTGRES_USER' && \
            export POSTGRES_PASSWORD='$POSTGRES_PASSWORD' && \
            export POSTGRES_DB='$POSTGRES_DB' && \
            envsubst < products/.env.example > products/.env && \
            export JWT_SECRET_KEY='$JWT_SECRET_KEY' && \
            export ACCESS_TOKEN_EXPIRE_SECONDS='$ACCESS_TOKEN_EXPIRE_SECONDS' && \
            export REFRESH_TOKEN_EXPIRE_SECONDS='$REFRESH_TOKEN_EXPIRE_SECONDS' && \
            envsubst < users/.env.example > users/.env && \
            docker compose -f products/docker-compose.yml up -d --build && \
            docker compose -f users/docker-compose.yml up -d --build
          "